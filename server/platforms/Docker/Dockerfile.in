FROM ubuntu:24.04


# Build arguments possible values: avx,avx2,avx512,cuda,vulkan,all, all-gpu, all-cpu
ARG BACKEND=avx
ARG PORT=8191


LABEL org.opencontainers.image.source="@PROJECT_HOMEPAGE_URL@"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.version="@PROJECT_VERSION@"
LABEL org.opencontainers.authors="@PROJECT_AUTHOR@"

LABEL version="@PROJECT_VERSION@"
LABEL description="@PROJECT_DESCRIPTION@ Server"

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
    libmagic1 \
    libstdc++6 \
    openssl \
    bash \
    libgomp1 \
    wget \
    jq \
    ca-certificates

COPY *.so /usr/lib/

RUN mkdir -p /app /app/log /app/data /app/models /app/models/checkpoints /app/models/loras /app/models/vae /app/models/embeddings /app/models/taesd /app/models/controlnet /app/models/esrgan

COPY server/@SERVER_BINARY_NAME@ /app/@SERVER_BINARY_NAME@
COPY server/server-docker.json /app/config.json
COPY server/@PROJECT_BINARY_NAME@_diffuser /app/@PROJECT_BINARY_NAME@_diffuser
COPY server/download_base_models.sh /app/download_base_models.sh
COPY server/entrypoint.sh /app/entrypoint.sh
COPY *.so /usr/lib/x86_64-linux-gnu/

RUN if [ "$BACKEND" = "cuda" ] || [ "$BACKEND" = "all" ] || [ "$BACKEND" = "all-gpu" ]; then \
        echo "CUDA support enabled"; \
        apt update && apt install -y --no-install-recommends libcudart12 libcublas12 libnvidia-compute-565-server; \
    else \
        rm -f /usr/lib/x86_64-linux-gnu/libstable-diffusion_cuda*; \
    fi

RUN if [ "$BACKEND" = "vulkan" ] || [ "$BACKEND" = "all" ] || [ "$BACKEND" = "all-gpu" ]; then \
        echo "Vulkan support enabled"; \
        apt update && apt install -y --no-install-recommends libvulkan1; \
    else \
        rm -f /usr/lib/x86_64-linux-gnu/libstable-diffusion_vulkan*; \
    fi

# AVX/AVX2/AVX512
RUN if [ "$BACKEND" = "avx" ] || [ "$BACKEND" = "all" ] || [ "$BACKEND" = "all-cpu" ]; then \
        echo "AVX support enabled"; \
    else \
        rm -f /usr/lib/x86_64-linux-gnu/libstable-diffusion_avx.*; \
    fi

RUN if [ "$BACKEND" = "avx2" ] || [ "$BACKEND" = "all" ] || [ "$BACKEND" = "all-cpu" ]; then \
        echo "AVX2 support enabled"; \
    else \
        rm -f /usr/lib/x86_64-linux-gnu/libstable-diffusion_avx2.*; \
    fi

RUN if [ "$BACKEND" = "avx512" ] || [ "$BACKEND" = "all" ] ||  [ "$BACKEND" = "all-cpu" ]; then \
        echo "AVX512 support enabled"; \
    else \
        rm -f /usr/lib/x86_64-linux-gnu/libstable-diffusion_avx512.*; \
    fi




RUN apt-get clean && rm -rf /var/lib/apt/lists/*

RUN sed -i "s/\"backend\": \".*\"/\"backend\": \"$BACKEND\"/" /app/config.json
RUN sed -i "s/\"port\": .*/\"port\": $PORT,/" /app/config.json
#RUN sed -i "s/\"exprocess_binary_path\": \".*\"/\"exprocess_binary_path\": \"\/app\/@PROJECT_BINARY_NAME@_diffuser\"/" /app/config.json


RUN chmod +x /app/download_base_models.sh
RUN chmod +x /app/entrypoint.sh

ENV DOWNLOAD_BASE_MODELS="True"

WORKDIR /app
ENTRYPOINT ["/app/entrypoint.sh"]
EXPOSE $PORT

#docker build --build-arg BACKEND=cuda -t myimage-cuda .
#docker build --build-arg BACKEND=vulkan -t myimage-vulkan .
#docker build --build-arg BACKEND=avx -t myimage-avx .
#docker build --build-arg BACKEND=avx2 -t myimage-avx2 .
#docker build --build-arg BACKEND=avx512 -t myimage-avx512 .