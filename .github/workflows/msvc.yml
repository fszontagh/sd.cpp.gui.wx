# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Find more information at:
# https://github.com/microsoft/msvc-code-analysis-action

name: Microsoft C++ Code Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 15 * * 4'

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'

permissions:
  contents: read

jobs:

  prepare-conan-cache:
    name: Prepare Conan cache for Windows
    runs-on: windows-2022
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache Conan
        id: cache-conan
        uses: actions/cache@v4
        with:
          path: |
            ~/.conan2
            build\generators
            CMakeUserPresets.json
          key: ${{ runner.os }}-win22-debug-conan-${{ hashFiles('conanfile.txt') }}
          restore-keys: ${{ runner.os }}-win22-debug-conan

      - name: Install Conan
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
            python -m pip install --upgrade pip
            pip install conan

      - name: Set up Conan
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          New-Item -ItemType Directory -Force -Path build
          cd build
          conan profile detect
          conan install .. -s compiler.cppstd=17 -s build_type=Debug --build=missing

  analyze:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Analyze
    runs-on: windows-latest
    needs: [prepare-conan-cache]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Conan
        id: cache-conan
        uses: actions/cache@v4
        with:
          path: |
           ~/.conan2
           build\generators
           CMakeUserPresets.json
          key: ${{ runner.os }}-win22-debug-conan-${{ hashFiles('conanfile.txt') }}
          restore-keys: ${{ runner.os }}-win22-debug-conan

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      - name: Set up Conan
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          New-Item -ItemType Directory -Force -Path build
          cd build
          conan profile detect
          conan install .. -s compiler.cppstd=17 -s build_type=Debug --build=missing

      - name: Configure and build
        run: |
          New-Item -ItemType Directory -Force -Path ${{ env.build }}
          cd ${{ env.build }}
          cmake .. -DCMAKE_BUILD_TYPE=Debug --preset conan-default
          cmake --build . --config Debug --target stablediffusiongui_diffuser
          cmake --build . --config Debug --target stablediffusiongui

      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@04825f6d9e00f87422d6bf04e1a38b1f3ed60d99
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset
          ignoredTargetPaths: ${{ env.build }}/_deps

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}
          category: msvc

      # Upload SARIF file as an Artifact to download and view
      - name: Upload SARIF as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sarif-file
          path: ${{ steps.run-analysis.outputs.sarif }}
