name: MATRIX build and package - windows & cache

on:
  workflow_dispatch:

jobs:
  build-windows:
    name: Build on Windows with ${{ matrix.variant.name }}
    runs-on: windows-2019
    strategy:
      matrix:
        variant:
          - name: CPU avx
            cmake_flags: "-DSD_AVX=ON"
            targets: "stable_diffusion_cpp_avx"
            cache-key: windows-avx

          - name: CPU avx2
            cmake_flags: "-DSD_AVX2=ON"
            targets: "stable_diffusion_cpp_avx2"
            cache-key: windows-avx2

          - name: CPU avx512
            cmake_flags: "-DSD_AVX512=ON"
            targets: "stable_diffusion_cpp_avx512"
            cache-key: windows-avx512

          - name: CUDA
            cmake_flags: "-DSD_CUBLAS=ON"
            targets: "stable_diffusion_cpp_cuda"
            cache-key: windows-cuda

          - name: HIPBLAS
            cmake_flags: "-DSD_HIPBLAS=ON"
            targets: "stable_diffusion_cpp_hipblas"
            cache-key: windows-hipblas
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache build outputs
        id: cache-build
        uses: actions/cache@v4
        with:
          path: build/Release/*.dll
          key: ${{ matrix.variant.cache-key }}-${{ hashFiles('cmake/sdcpp_version.cmake') }}
          restore-keys: ${{ matrix.variant.cache-key }}-
      - name: Cache Conan
        id: cache-conan
        uses: actions/cache@v4
        with:
          path: |
           ~/.conan
           build\generators
           CMakeUserPresets.json
          key: ${{ runner.os }}-conan-${{ hashFiles('conanfile.txt') }}
          restore-keys: ${{ runner.os }}-conan

      - name: Install Conan
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install conan

      - name: Install CUDA Toolkit
        if: ${{ matrix.variant.name == 'CUDA' && steps.cache-build.outputs.cache-hit != 'true' }}
        uses: Jimver/cuda-toolkit@v0.2.11
        with:
          cuda: "12.2.0"

      - name: Install ROCm Toolkit
        if: ${{ matrix.variant.name == 'HIPBLAS' && steps.cache-build.outputs.cache-hit != 'true' }}
        uses: Cyberhan123/rocm-toolkit@v0.1.0
        with:
          rocm: "5.5.0"

      - name: Install Ninja
        if: ${{ matrix.variant.name == 'HIPBLAS' && steps.cache-build.outputs.cache-hit != 'true' }}
        uses: urkle/action-get-ninja@v1
        with:
          version: 1.11.1

      - name: Set up Conan
        if: steps.cache-build.outputs.cache-hit != 'true' && steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          mkdir build
          cd build
          conan profile detect
          conan install .. -s compiler.cppstd=17 --build=never

      - name: Configure CMake
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release ${{ matrix.variant.cmake_flags }} --preset conan-default

      - name: Build Targets
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          cd build
          cmake --build . --config Release --target ${{ matrix.variant.targets }}
          

  package-installer:
    name: Create Windows Installer
    runs-on: windows-2019
    needs: [build-windows]
    steps:
      - name: Check out code
        uses: actions/checkout@v3        

      - name: Restore CPU AVX Build Cache
        uses: actions/cache@v4
        with:
          path: build-avx/
          key: windows-avx-${{ hashFiles('cmake/sdcpp_version.cmake') }}
          restore-keys: windows-avx-

      - name: Restore CPU AVX2 Build Cache
        uses: actions/cache@v4
        with:
          path: build-avx2/
          key: windows-avx2-${{ hashFiles('cmake/sdcpp_version.cmake') }}
          restore-keys: windows-avx2-

      - name: Restore CPU AVX512 Build Cache
        uses: actions/cache@v4
        with:
          path: build-avx512/
          key: windows-avx512-${{ hashFiles('cmake/sdcpp_version.cmake') }}
          restore-keys: windows-avx-

      - name: Restore CUDA Build Cache
        uses: actions/cache@v4
        with:
          path: build-cuda/
          key: windows-cuda-${{ hashFiles('cmake/sdcpp_version.cmake') }}
          restore-keys: windows-cuda-

      - name: Restore HIPBLAS Build Cache
        uses: actions/cache@v4
        with:
          path: build-hipblas/
          key: windows-hipblas-${{ hashFiles('cmake/sdcpp_version.cmake') }}
          restore-keys: windows-hipblas-

      - name: Merge Build Outputs
        run: |
          mkdir build
          mkdir build/Release
          if (Test-Path build-avx) { Copy-Item build-cpu/* build/Release/ -Force }
          if (Test-Path build-avx2) { Copy-Item build-cpu/* build/Release/ -Force }          
          if (Test-Path build-avx512) { Copy-Item build-cpu/* build/Release/ -Force }          
          if (Test-Path build-cuda) { Copy-Item build-cuda/* build/Release/ -Force }
          if (Test-Path build-hipblas) { Copy-Item build-hipblas/* build/Release/ -Force }

      - name: Generate NSIS Installer
        run: |
          cd build
          cmake --configure .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --target package

      - name: Release NSIS Installer
        uses: softprops/action-gh-release@v2
        with:
          body: ""
          draft: true
          prerelease: true
          files: |
            build/*.exe
            build/*.sha256
