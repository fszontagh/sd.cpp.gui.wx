#ifndef __MainWindowUI__
#define __MainWindowUI__

/**
@file
Subclass of UI, which is generated by wxFormBuilder.
*/

#include "wx/fileconf.h"
class MainApp;

/** Implementing UI */
class MainWindowUI : public mainUI {
protected:
    // Handlers for UI events.
    void onSettings(wxCommandEvent& event) override;
    void onModelsRefresh(wxCommandEvent& event) override;
    void OnAboutButton(wxCommandEvent& event) override;
    void OnCivitAitButton(wxCommandEvent& event) override;
    void OnStopBackgroundProcess(wxCommandEvent& event) override;
    void onModelSelect(wxCommandEvent& event) override;
    void onTypeSelect(wxCommandEvent& event) override;
    void onVaeSelect(wxCommandEvent& event) override;
    void onSamplerSelect(wxCommandEvent& event) override;
    void onRandomGenerateButton(wxCommandEvent& event) override;
    void onSd15ResSelect(wxCommandEvent& event) override;
    void onSdXLResSelect(wxCommandEvent& event) override;
    void OnWHChange(wxSpinEvent& event) override;
    void onResolutionSwap(wxCommandEvent& event) override;
    void onSavePreset(wxCommandEvent& event) override;
    void onLoadPreset(wxCommandEvent& event) override;
    void onSelectPreset(wxCommandEvent& event) override;
    void onDeletePreset(wxCommandEvent& event) override;
    void m_notebook1302OnNotebookPageChanged(wxNotebookEvent& event) override;
    void onJobsStart(wxCommandEvent& event) override;
    void onJobsPause(wxCommandEvent& event) override;
    void onJobsDelete(wxCommandEvent& event) override;
    void OnJobListItemActivated(wxDataViewEvent& event) override;
    void onContextMenu(wxDataViewEvent& event) override;
    void OnJobListItemSelection(wxDataViewEvent& event) override;
    void onTxt2ImgFileDrop(wxDropFilesEvent& event) override;
    void OnPromptText(wxCommandEvent& event) override;
    void OnNegPromptText(wxCommandEvent& event) override;
    void onGenerate(wxCommandEvent& event) override;
    void OnControlnetImageOpen(wxFileDirPickerEvent& event) override;
    void OnControlnetImagePreviewButton(wxCommandEvent& event) override;
    void OnControlnetImageDelete(wxCommandEvent& event) override;
    void onFilePickerDiffusionModel(wxFileDirPickerEvent& event) override;
    void onFilePickerClipL(wxFileDirPickerEvent& event) override;
    void onFilePickerT5XXL(wxFileDirPickerEvent& event) override;
    void onCleanDiffusionModel(wxCommandEvent& event) override;
    void Onimg2imgDropFile(wxDropFilesEvent& event) override;
    void OnImageOpenFileChanged(wxFileDirPickerEvent& event) override;
    void OnImg2ImgPreviewButton(wxCommandEvent& event) override;
    void OnDeleteInitialImage(wxCommandEvent& event) override;
    void OnUpscalerDropFile(wxDropFilesEvent& event) override;
    void OnImageOpenFilePickerChanged(wxFileDirPickerEvent& event) override;
    void OnDeleteUpscaleImage(wxCommandEvent& event) override;
    void OnUpscalerModelSelection(wxCommandEvent& event) override;
    void OnUpscalerFactorChange(wxSpinEvent& event) override;
    void OnCheckboxLoraFilter(wxCommandEvent& event) override;
    void OnCheckboxCheckpointFilter(wxCommandEvent& event) override;
    void OnModellistFilterKeyUp(wxKeyEvent& event) override;
    void OnDataModelActivated(wxDataViewEvent& event) override;
    void OnDataModelSelected(wxDataViewEvent& event) override;

public:
    /** Constructor */
    MainWindowUI(wxWindow* parent, const std::string dllName, const std::string& usingBackend, bool disableExternalProcessHandling, MainApp* mapp);
    //// end generated class members
    ~MainWindowUI();
    void OnThreadMessage(wxThreadEvent& e);
    void OnCivitAiThreadMessage(wxThreadEvent& e);

private:
    MainApp* mapp;
    bool disableExternalProcessHandling               = false;
    std::atomic<unsigned int> jobsCountSinceSegfault  = {0};
    std::atomic<unsigned int> stepsCountSinceSegfault = {0};
    std::string usingBackend;
    sd_gui_utils::config* cfg;
    MainWindowSettings* settingsWindow;
    std::vector<wxStaticBitmap*> modelImagePreviews;
    std::vector<wxStaticBitmap*> jobImagePreviews;

    wxTaskBarIcon* TaskBar;
    wxMenu* TaskBarMenu;
    wxBitmap TaskBarIcon;

    MainWindowCivitAiWindow* civitwindow = nullptr;

    /// @brief first: model display name
    /// @brief second: model full path
    std::map<std::string, std::string> ModelFiles;
    /// @brief first: model display name
    /// @brief second: index in the selectbox
    std::map<std::string, int> ModelFilesIndex;
    std::map<std::string, std::string> VaeFiles;
    std::map<std::string, std::string> TaesdFiles;
    std::map<std::string, std::string> EsrganFiles;
    std::map<std::string, std::string> ControlnetModels;
    std::map<std::string, std::string> LoraFiles;
    std::map<std::string, std::string> EmbeddingFiles;
    std::map<std::string, sd_gui_utils::generator_preset> Presets;

    std::shared_ptr<ModelInfo::Manager> ModelManager;
    std::shared_ptr<QM::QueueManager> qmanager;
    std::mutex mutex;
    std::mutex logMutex;
    std::mutex taskBarMutex;
    bool firstCfgInit = true;
    int init_width    = 512;
    int init_height   = 512;

    std::shared_ptr<wxImageList> previewImageList;
    std::vector<std::thread*> threads;
    wxBitmap ControlnetOrigPreviewBitmap;
    wxBitmap AppOrigPlaceHolderBitmap;

    // row,QueueItem
    std::map<int, std::shared_ptr<QM::QueueItem>> JobTableItems;
    std::vector<sd_gui_utils::VoidHolder*> voids;
    struct subprocess_s* subprocess = nullptr;

    std::atomic<bool> extProcessNeedToRun = true;
    std::string extprocessCommand;
    std::string extProcessParam;
    std::string extprocessLastError;
    QM::QueueEvents extProcessLastEvent = QM::QueueEvents::ITEM_ADDED;
    std::ofstream logfile;

    void initConfig();
    void loadModelList();
    void loadLoraList();
    void loadVaeList();
    void loadTaesdList();
    void loadControlnetList();
    void loadEmbeddingList();
    void loadSamplerList();
    void loadEsrganList();
    void loadTypeList();
    void loadSchedulerList();
    void refreshModelTable(const wxString& filter = wxEmptyString);
    void OnCloseSettings(wxCloseEvent& event);
    void OnCloseCivitWindow(wxCloseEvent& event);
    void OnHtmlLinkClicked(wxHtmlLinkEvent& event) override;
    void onWhatIsThis(wxCommandEvent& event) override;
    void OnExit(wxEvent& event);
    void OnPopupClick(wxCommandEvent& evt);
    void LoadFileList(sd_gui_utils::DirTypes type = sd_gui_utils::DirTypes::CHECKPOINT);
    void LoadPresets();
    void ShowNotification(const wxString& title, const wxString& message);
    void ChangeModelByName(wxString ModelName);
    void ChangeModelByInfo(const sd_gui_utils::ModelFileInfo info);
    void ChangeGuiFromQueueItem(const QM::QueueItem item);
    void UpdateModelInfoDetailsFromModelList(sd_gui_utils::ModelFileInfo* modelinfo);
    void UpdateJobInfoDetailsFromJobQueueList(std::shared_ptr<QM::QueueItem> item);
    bool ProcessEventHandler(std::string msg);
    void ProcessCheckThread();
    void ProcessOutputThread();
    void ProcessStdOutEvent(const char* bytes, size_t n);
    void ProcessStdErrEvent(const char* bytes, size_t n);
    inline void DisableControlNet() {
        this->m_controlnetModels->Disable();
        this->m_controlnetModels->Select(0);
        this->m_controlnetImageDelete->Disable();
        this->m_controlnetImageOpen->Disable();
        this->m_controlnetStrength->Disable();
        this->m_controlnetImageOpen->SetPath("");
        auto origSize = this->m_controlnetImagePreview->GetSize();
        this->m_controlnetImagePreview->SetBitmap(this->ControlnetOrigPreviewBitmap);
        this->m_controlnetImagePreview->SetSize(origSize);
        this->m_controlnetImagePreviewButton->Disable();
    };

    inline void EnableControlNet() {
        this->m_controlnetModels->Enable();
        this->m_controlnetImageDelete->Enable();
        this->m_controlnetImageOpen->Enable();
        this->m_controlnetStrength->Enable();
    };

    inline void DisableModelSelect() {
        this->m_model->Select(0);
        this->m_model->Disable();
    }
    inline void EnableModelSelect() { this->m_model->Enable(); }

    std::shared_ptr<std::thread> processCheckThread   = nullptr;
    std::shared_ptr<std::thread> processHandleOutput  = nullptr;
    std::atomic_bool extProcessRunning                = false;
    std::shared_ptr<SharedMemoryManager> sharedMemory = nullptr;

    static void ModelHashingCallback(size_t readed_size, std::string sha256, void* custom_pointer);
    static void ModelStandaloneHashingCallback(size_t readed_size, std::string sha256, void* custom_pointer);

    // std::shared_ptr<QM::QueueItem> handleSdImage(std::string result, std::shared_ptr<QM::QueueItem> itemPtr, wxEvtHandler* eventHandler);
    std::shared_ptr<QM::QueueItem> handleSdImage(const std::string& tmpImagePath, std::shared_ptr<QM::QueueItem> itemPtr, wxEvtHandler* eventHandler);

    std::string paramsToImageComment(QM::QueueItem myItem, sd_gui_utils::ModelFileInfo modelInfo);
    void imageCommentToGuiParams(std::map<std::string, std::string> params, SDMode mode);
    void onimg2ImgImageOpen(const wxString& file);
    void onUpscaleImageOpen(const wxString& file);
    void onControlnetImageOpen(const wxString& file);

    void PrepareModelConvert(sd_gui_utils::ModelFileInfo* modelInfo);

    // start a thread to generate image
    void StartGeneration(std::shared_ptr<QM::QueueItem> myJob);

    // handle queue managers events, manipulate data table by events
    void OnQueueItemManagerItemAdded(std::shared_ptr<QM::QueueItem> item);
    void OnQueueItemManagerItemUpdated(std::shared_ptr<QM::QueueItem> item);
    void OnQueueItemManagerItemStatusChanged(std::shared_ptr<QM::QueueItem> item);

    template <typename T>
    static void SendThreadEvent(wxEvtHandler* eventHandler, QM::QueueEvents eventType, const T& payload, std::string text = "");

    template <typename T>
    static void SendThreadEvent(wxEvtHandler* eventHandler, sd_gui_utils::ThreadEvents eventType, const T& payload, std::string text = "");

    // generate the hash for a model, from the model table list
    void threadedModelHashCalc(wxEvtHandler* eventHandler, sd_gui_utils::ModelFileInfo* modelinfo);
    void threadedModelInfoDownload(wxEvtHandler* eventHandler, sd_gui_utils::ModelFileInfo* modelinfo);
    void threadedModelInfoImageDownload(wxEvtHandler* eventHandler, sd_gui_utils::ModelFileInfo* modelinfo);

    SdSetLogCallbackFunction sd_set_log_callback;
    SdSetProgressCallbackFunction sd_set_progress_callback;

    inline void initLog() {
        logfile.open(this->cfg->datapath + "/app.log", std::ios::app);
        if (!logfile.is_open()) {
            std::cerr << "Err: can not open logfile: " << this->cfg->datapath + "/app.log" << std::endl;
            return;
        }
    }

    inline void writeLog(const std::string& msg, bool writeIntoGui = true) {
        std::time_t now   = std::time(nullptr);
        std::tm* timeinfo = std::localtime(&now);
        char timestamp[30];
        std::string message = msg;
        std::strftime(timestamp, sizeof(timestamp), "[%Y-%m-%d %H:%M:%S]", timeinfo);

        if (message.length() > 0 && message.back() != '\n') {
            message.append("\n");
        }

        std::lock_guard<std::mutex> lock(this->logMutex);
        wxString logline = wxString::Format("%s: %s", timestamp, wxString::FromUTF8Unchecked(message));
        if (logfile.is_open()) {
            logfile << logline.c_str();
            logfile.flush();
        }

        if (writeIntoGui) {
            this->logs->AppendText(logline);
        }
    }
    inline void writeLog(const wxString& message) {
        this->writeLog(message.utf8_string());
    }
};

#endif  // __MainWindowUI__
