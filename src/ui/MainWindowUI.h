#ifndef __MainWindowUI__
#define __MainWindowUI__

/**
@file
Subclass of UI, which is generated by wxFormBuilder.
*/

#include "MainWindow.h"

#include "MainWindowSettings.h"
#include "ModelInfo.h"
#include "QueueManager.h"

#include <atomic>
#include <cctype>
#include <fstream>
#include <map>
#include <memory>
#include <mutex>
#include <thread>
#include <vector>


#include "../helpers/sd.hpp"
#include "../libs/SharedMemoryManager.h"
#include "process.hpp"
#include "utils.hpp"
#include "MainWindowCivitAiWindow.h"
#include <wx/display.h>
#include <wx/dynlib.h>
#include <wx/event.h>
#include <wx/fileconf.h>
#include <wx/menu.h>
#include <wx/msgdlg.h>
#include <wx/notifmsg.h>
#include <wx/splash.h>
#include <wx/sstream.h>
#include <wx/stdpaths.h>
#include <wx/taskbar.h>
#include <wx/textdlg.h>
#include <wx/tokenzr.h>
#include <wx/webrequest.h>
#include <exiv2/exiv2.hpp>

#include <wx/persist/toplevel.h>


/** Implementing UI */
class MainWindowUI : public mainUI {
protected:
    // Handlers for UI events.
    void onSettings(wxCommandEvent& event) override;
    void onModelsRefresh(wxCommandEvent& event) override;
    void OnAboutButton(wxCommandEvent& event) override;
    void OnCivitAitButton(wxCommandEvent& event) override;
    void onModelSelect(wxCommandEvent& event) override;
    void onTypeSelect(wxCommandEvent& event) override;
    void onVaeSelect(wxCommandEvent& event) override;
    void onSamplerSelect(wxCommandEvent& event) override;
    void onRandomGenerateButton(wxCommandEvent& event) override;
    void onSd15ResSelect(wxCommandEvent& event) override;
    void onSdXLResSelect(wxCommandEvent& event) override;
    void OnWHChange(wxSpinEvent& event) override;
    void onResolutionSwap(wxCommandEvent& event) override;
    void onSavePreset(wxCommandEvent& event) override;
    void onLoadPreset(wxCommandEvent& event) override;
    void onSelectPreset(wxCommandEvent& event) override;
    void onDeletePreset(wxCommandEvent& event) override;
    void m_notebook1302OnNotebookPageChanged(wxNotebookEvent& event) override;
    void onJobsStart(wxCommandEvent& event) override;
    void onJobsPause(wxCommandEvent& event) override;
    void onJobsDelete(wxCommandEvent& event) override;
    void OnJobListItemActivated(wxDataViewEvent& event) override;
    void onContextMenu(wxDataViewEvent& event) override;
    void OnJobListItemSelection(wxDataViewEvent& event) override;
    void onTxt2ImgFileDrop(wxDropFilesEvent& event) override;
    void OnPromptText(wxCommandEvent& event) override;
    void OnNegPromptText(wxCommandEvent& event) override;
    void onGenerate(wxCommandEvent& event) override;
    void OnControlnetImageOpen(wxFileDirPickerEvent& event) override;
    void OnControlnetImagePreviewButton(wxCommandEvent& event) override;
    void OnControlnetImageDelete(wxCommandEvent& event) override;
    void Onimg2imgDropFile(wxDropFilesEvent& event) override;
    void OnImageOpenFileChanged(wxFileDirPickerEvent& event) override;
    void OnImg2ImgPreviewButton(wxCommandEvent& event) override;
    void OnDeleteInitialImage(wxCommandEvent& event) override;
    void OnUpscalerDropFile(wxDropFilesEvent& event) override;
    void OnImageOpenFilePickerChanged(wxFileDirPickerEvent& event) override;
    void OnDeleteUpscaleImage(wxCommandEvent& event) override;
    void OnUpscalerModelSelection(wxCommandEvent& event) override;
    void OnUpscalerFactorChange(wxSpinEvent& event) override;
    void OnCheckboxLoraFilter(wxCommandEvent& event) override;
    void OnCheckboxCheckpointFilter(wxCommandEvent& event) override;
    void OnModellistFilterKeyUp(wxKeyEvent& event) override;
    void OnDataModelActivated(wxDataViewEvent& event) override;
    void OnDataModelSelected(wxDataViewEvent& event) override;

public:
    /** Constructor */
    MainWindowUI(wxWindow* parent, const std::string dllName, const std::string& usingBackend);
    //// end generated class members
    ~MainWindowUI();
    void OnThreadMessage(wxThreadEvent& e);
    void OnCivitAiThreadMessage(wxThreadEvent& e);

private:
    std::string usingBackend;
    wxFileConfig* fileConfig = nullptr;
    sd_gui_utils::config* cfg;
    wxString ini_path;
    MainWindowSettings* settingsWindow;
    SDParams* sd_params;
    std::vector<wxStaticBitmap*> modelImagePreviews;
    std::vector<wxStaticBitmap*> jobImagePreviews;

    wxTaskBarIcon* TaskBar;
    wxMenu* TaskBarMenu;
    wxBitmap TaskBarIcon;

    MainWindowCivitAiWindow* civitwindow = nullptr;

    /// @brief first: model display name
    /// @brief second: model full path
    std::map<std::string, std::string> ModelFiles;
    /// @brief first: model display name
    /// @brief second: index in the selectbox
    std::map<std::string, int> ModelFilesIndex;
    std::map<std::string, std::string> VaeFiles;
    std::map<std::string, std::string> TaesdFiles;
    std::map<std::string, std::string> EsrganFiles;
    std::map<std::string, std::string> ControlnetModels;
    std::map<std::string, std::string> LoraFiles;
    std::map<std::string, std::string> EmbeddingFiles;
    std::map<std::string, sd_gui_utils::generator_preset> Presets;

    ModelInfo::Manager* ModelManager;
    wxString previousText;
    // the queue manager
    QM::QueueManager* qmanager;
    std::mutex mutex;
    std::mutex logMutex;
    bool modelLoaded        = false;
    bool upscaleModelLoaded = false;
    bool firstCfgInit       = true;
    int init_width          = 512;
    int init_height         = 512;
    std::string currentModel;
    std::string currentVaeModel;
    std::string currentTaesdModel;
    std::string currentControlnetModel;
    std::string currentUpscalerModel;
    QM::GenerationMode lastGenerationMode;
    bool currentVaeDecodeOnly;
    sd_type_t currentwType = sd_type_t::SD_TYPE_COUNT;
    wxImage* currentInitialImage;
    wxImage* currentInitialImagePreview;
    wxImage* currentControlnetImage;
    wxImage* currentControlnetImagePreview;
    wxImage* currentUpscalerSourceImage;
    std::string currentInitialImagePath;
    wxImageList* previewImageList;
    wxImageList* modelPreviewImageList;
    sd_ctx_t* txt2img_sd_ctx;
    upscaler_ctx_t* upscaler_sd_ctx;
    std::streambuf* buffer;
    std::vector<std::thread*> threads;
    wxTextAttr defaultTextCtrlStyle;
    wxBitmap ControlnetOrigPreviewBitmap;
    wxBitmap AppOrigPlaceHolderBitmap;

    // row,QueueItem
    std::map<int, QM::QueueItem*> JobTableItems;
    std::vector<sd_gui_utils::VoidHolder*> voids;

    std::shared_ptr<TinyProcessLib::Process> extProcess;
    
    std::atomic<bool> extProcessNeedToRun = true;    
    std::string extprocessCommand;
    std::string extprocessLastError;
    QM::QueueEvents extProcessLastEvent = QM::QueueEvents::ITEM_ADDED;

    void initConfig();
    void loadModelList();
    void loadLoraList();
    void loadVaeList();
    void loadTaesdList();
    void loadControlnetList();
    void loadEmbeddingList();
    void loadSamplerList();
    void loadEsrganList();
    void loadTypeList();
    void loadShcedulerList();
    void refreshModelTable(std::string filter = "");
    void OnCloseSettings(wxCloseEvent& event);
    void OnCloseCivitWindow(wxCloseEvent& event);
    void OnHtmlLinkClicked(wxHtmlLinkEvent& event) override;
    void OnExit(wxEvent& event);
    void OnPopupClick(wxCommandEvent& evt);
    void LoadFileList(sd_gui_utils::DirTypes type = sd_gui_utils::DirTypes::CHECKPOINT);
    void LoadPresets();
    void ShowNotification(std::string title, std::string message);
    void ChangeModelByName(wxString ModelName);
    void ChangeModelByInfo(const sd_gui_utils::ModelFileInfo info);
    void ChangeGuiFromQueueItem(const QM::QueueItem item);
    void UpdateModelInfoDetailsFromModelList(sd_gui_utils::ModelFileInfo* modelinfo);
    void UpdateJobInfoDetailsFromJobQueueList(QM::QueueItem* item);
    bool ProcessEventHandler(std::string msg);
    void ProcessCheckThread();
    void ProcessStdOutEvent(const char *bytes, size_t n);
    void ProcessStdErrEvent(const char *bytes, size_t n);
    std::shared_ptr<std::thread> processCheckThread = nullptr;
    std::atomic_bool extProcessRunning = false;
    std::shared_ptr<SharedMemoryManager> sharedMemory = nullptr;

    static void ModelHashingCallback(size_t readed_size, std::string sha256, void* custom_pointer);
    static void ModelStandaloneHashingCallback(size_t readed_size, std::string sha256, void* custom_pointer);

    static void HandleSDLog(sd_log_level_t level, const char* text, void* data);
    static void HandleSDProgress(int step, int steps, float time, void* data);

    //QM::QueueItem* handleSdImage(std::string result, QM::QueueItem* itemPtr, wxEvtHandler* eventHandler);
    QM::QueueItem* handleSdImage(const std::string& tmpImagePath, QM::QueueItem* itemPtr, wxEvtHandler* eventHandler);

    std::string paramsToImageComment(QM::QueueItem myItem, sd_gui_utils::ModelFileInfo modelInfo);
    void imageCommentToGuiParams(std::map<std::string, std::string> params, SDMode mode);
    void onimg2ImgImageOpen(std::string file);
    void onUpscaleImageOpen(std::string file);
    void onControlnetImageOpen(std::string file);

    // generate in another thread
    void GenerateTxt2img(wxEvtHandler* eventHandler, QM::QueueItem* myItem);
    void GenerateImg2img(wxEvtHandler* eventHandler, QM::QueueItem* item);
    void GenerateUpscale(wxEvtHandler* eventHandler, QM::QueueItem* item);

    // start a thread to generate image
    void StartGeneration(QM::QueueItem* myJob);

    // handle queue managers events, manipulate data table by events
    void OnQueueItemManagerItemAdded(QM::QueueItem* item);
    void OnQueueItemManagerItemUpdated(QM::QueueItem* item);
    void OnQueueItemManagerItemStatusChanged(QM::QueueItem* item);

    template <typename T>
    static void SendThreadEvent(wxEvtHandler* eventHandler, QM::QueueEvents eventType, const T& payload, std::string text = "");

    template <typename T>
    static void SendThreadEvent(wxEvtHandler* eventHandler, sd_gui_utils::ThreadEvents eventType, const T& payload, std::string text = "");

    // generate the hash for a model, from the model table list
    void threadedModelHashCalc(wxEvtHandler* eventHandler, sd_gui_utils::ModelFileInfo* modelinfo);
    void threadedModelInfoDownload(wxEvtHandler* eventHandler, sd_gui_utils::ModelFileInfo* modelinfo);
    void threadedModelInfoImageDownload(wxEvtHandler* eventHandler, sd_gui_utils::ModelFileInfo* modelinfo);

    SdSetLogCallbackFunction sd_set_log_callback;
    SdSetProgressCallbackFunction sd_set_progress_callback;

    inline static void terminateHandler() {
        std::cout << "Assertion failure caught!" << std::endl;
        std::exit(EXIT_FAILURE);
    }

    inline void writeLog(const std::string& message, bool writeIntoGui = true) {
        std::ofstream logfile(this->cfg->datapath + "/app.log", std::ios::app);
        if (!logfile.is_open()) {
            std::cerr << "Err: can not open logfile: " << this->cfg->datapath + "/app.log" << std::endl;
            return;
        }
        std::time_t now   = std::time(nullptr);
        std::tm* timeinfo = std::localtime(&now);
        char timestamp[30];
        std::strftime(timestamp, sizeof(timestamp), "[%Y-%m-%d %H:%M:%S]", timeinfo);
        std::lock_guard<std::mutex> lock(this->logMutex);
        wxString logline = wxString::Format("%s: %s", timestamp, message);
        logfile << logline.c_str();
        logfile.close();
        if (writeIntoGui) {
            this->logs->AppendText(logline);
        }
    }
    inline void writeLog(const wxString& message) {
        this->writeLog(message.ToStdString());
    }
};

#endif  // __MainWindowUI__
